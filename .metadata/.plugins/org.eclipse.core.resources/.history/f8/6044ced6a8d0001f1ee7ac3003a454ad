package com.in28minutes.rest.webservices.restfulwebservices.user;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.in28minutes.rest.webservices.restfulwebservices.jpa.UserRepository;

import jakarta.validation.Valid;

@RestController
public class UserJpaResource {
	
	private UserDaoService service;
	
	private UserRepository repository;
	
	public UserJpaResource(UserDaoService service, UserRepository repository) {
		this.service = service;
		this.repository = repository;
	}
	
	@GetMapping("/jpa/users")
	public List<User> retrieveAllUsers() {
//		return service.findAll();
		return repository.findAll();
	}
	
	@GetMapping("/jpa/users/{id}")
//	public User retrieveUsers(@PathVariable int id) {
	public EntityModel<User> retrieveUsers(@PathVariable int id) {
//		User user = service.findOne(id);
		Optional<User> user = repository.findById(id);
		
//		if (user == null) {
		if (user.isEmpty()) {
			throw new UserNotFoundException("id:"+ id);
		}
		
		EntityModel<User> entityModel = EntityModel.of(user.get());
		
		WebMvcLinkBuilder link = linkTo(methodOn(this.getClass()).retrieveAllUsers());
		entityModel.add(link.withRel("all-users"));
		
		return entityModel;
	}
	
	@PostMapping("/jpa/users")
	public ResponseEntity<Object> createUser(@Valid @RequestBody User user) {
		
		User savedUser = service.save(user);
		
		URI location = ServletUriComponentsBuilder.fromCurrentRequest() // /users
						.path("/{id}")
						.buildAndExpand(savedUser.getId()) // /4(id)
						.toUri(); // uri로 변환
		
		return ResponseEntity.created(location).build();
	}
	

	@DeleteMapping("/jpa/users/{id}")
	public void deleteUsers(@PathVariable int id) {
		service.deleteById(id);
	}
}
